{"version":3,"sources":["components/disc/Disc.js","utilities/ClassNames.js","components/board/Board.js","components/score/ScoreBanner.js","components/score/Score.js","components/game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Disc","isDisabled","props","value","isWinner","isMatchClass","this","isMatch","className","disabled","onClick","Component","classNames","classObject","classes","key","hasOwnProperty","push","join","Board","getColumnIndex","index","WIDTH","config","handleOnMouseOver","rowIndex","setState","hoveredRow","handleOnMouseOut","getSlotClassName","columnIndex","state","discs","map","disc","matches","includes","onMouseOver","onMouseOut","data-column","onDiscClick","ScoreBanner","winner","handleResetGame","Score","player1Up","currentPlayerUp","getPlayerClassName","playerIndex","BOARD_CONFIG","HEIGHT","Game","Array","fill","getNextSlot","slotsInClickedRow","forEach","length","handleOnDiscClick","checkForWinner","horizontalWinner","checkForHorizontalMatches","Math","ceil","diagonalRightWinner","diagonalLeftWinner","verticalWinner","checkForVerticalMatches","checkForDiagonalRightMatches","checkForDiagonalLeftMatches","i","localIndex","nextDisc","matchLength","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efedecd9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Disc.scss';\n\nclass Disc extends Component {\n    isDisabled = () => {\n        const { value, isWinner } = this.props;\n\n        return value || isWinner;\n    };\n    render() {\n        const isMatchClass = this.props.isMatch ? 'disc_isMatch' : '';\n        return (\n            <button className={`disc disc_${this.props.value} ${isMatchClass}`} disabled={this.isDisabled()} onClick={this.props.onClick}>\n                <span className=\"disc-value\">{this.props.value}</span>\n                <div className=\"disc-piece\"></div>\n            </button>\n        );\n    }\n}\n\nexport default Disc;\n","const classNames = classObject => {\n    const classes = [];\n\n    if (typeof classObject === 'object') {\n        for (const key in classObject) {\n            if (classObject.hasOwnProperty(key) && classObject[key]) {\n                classes.push(key);\n            }\n        }\n    }\n\n    return classes.join(' ');\n};\n\nexport default classNames;\n","import React, { Component } from 'react';\nimport Disc from '../disc/Disc';\nimport './Board.scss';\nimport classNames from '../../utilities/ClassNames';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hoveredRow: null,\n        };\n    }\n    getColumnIndex = (index) => {\n        const { WIDTH } = this.props.config;\n\n        return index < WIDTH ? index : index % WIDTH;\n    };\n\n    handleOnMouseOver = (rowIndex) => {\n        this.setState({ hoveredRow: rowIndex });\n    };\n\n    handleOnMouseOut = () => {\n        this.setState({ hoveredRow: null });\n    };\n\n    getSlotClassName = (columnIndex) => {\n        return classNames({\n            'board-slot': true,\n            'board-slot_isActive': columnIndex === this.state.hoveredRow,\n        });\n    };\n\n    render() {\n        const { isWinner } = this.props;\n        return (\n            <ul className={`board board_${this.props.config.WIDTH}up`}>\n                {this.props.discs.map((disc, index) => {\n                    const isMatch = this.props.matches.includes(index);\n                    const columnIndex = this.getColumnIndex(index);\n                    return (\n                        <li\n                            key={`slot_${index}`}\n                            onMouseOver={() => this.handleOnMouseOver(columnIndex)}\n                            onMouseOut={() => this.handleOnMouseOut()}\n                            className={this.getSlotClassName(columnIndex)}\n                            data-column={columnIndex}\n                        >\n                            <Disc value={disc} isWinner={isWinner} isMatch={isMatch} onClick={() => this.props.onDiscClick(columnIndex)} />\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport './scoreBanner.scss';\n\nexport const ScoreBanner = ({ winner, handleResetGame }) => {\n    return (\n        <div className=\"scoreBanner\">\n            {winner} Wins!\n            <button className=\"scoreBanner-reset\" onClick={handleResetGame}>\n                Play Again!\n            </button>\n        </div>\n    );\n};\n","import React from 'react';\nimport { ScoreBanner } from './ScoreBanner';\nimport './score.scss';\nimport classNames from '../../utilities/ClassNames';\nimport Disc from '../disc/Disc';\n\nexport const Score = ({ isWinner, player1Up, handleResetGame }) => {\n    const winner = player1Up ? 'Player 1' : 'Player 2';\n    const currentPlayerUp = player1Up ? 2 : 1;\n    const getPlayerClassName = (playerIndex) => {\n        return classNames({\n            'score-players-player': true,\n            'score-players-player_isUp': playerIndex === currentPlayerUp,\n        });\n    };\n\n    return (\n        <div className=\"score\">\n            <div className=\"score-players\">\n                <div className={getPlayerClassName(1)}>\n                    Player 1\n                    <div className=\"score-players-player-disc\">\n                        <Disc value=\"O\" />\n                    </div>\n                </div>\n                <div className={getPlayerClassName(2)}>\n                    <div className=\"score-players-player-disc\">\n                        <Disc value=\"X\" />\n                    </div>\n                    Player 2\n                </div>\n            </div>\n            {isWinner && <ScoreBanner winner={winner} handleResetGame={handleResetGame} />}\n        </div>\n    );\n};\n","import React, { Component } from 'react';\nimport Board from '../board/Board';\nimport { Score } from '../score/Score';\n\nconst BOARD_CONFIG = {\n    HEIGHT: 6,\n    WIDTH: 7,\n};\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            discs: Array(BOARD_CONFIG.HEIGHT * BOARD_CONFIG.WIDTH).fill(null),\n            isWinner: false,\n            player1Up: false,\n        };\n    }\n\n    handleResetGame = () => {\n        this.setState({\n            discs: Array(BOARD_CONFIG.HEIGHT * BOARD_CONFIG.WIDTH).fill(null),\n            isWinner: false,\n            player1Up: false,\n        });\n    };\n\n    getNextSlot = (rowIndex) => {\n        let slotsInClickedRow = [];\n        const { WIDTH } = BOARD_CONFIG;\n        this.state.discs.forEach((disc, index) => {\n            if (disc) {\n                return;\n            }\n\n            if (rowIndex === index || index % WIDTH === rowIndex) {\n                slotsInClickedRow.push(index);\n            }\n        });\n\n        return slotsInClickedRow[slotsInClickedRow.length - 1];\n    };\n\n    handleOnDiscClick = (rowIndex) => {\n        const discs = [...this.state.discs];\n        const nextSlotIndex = this.getNextSlot(rowIndex);\n\n        discs[nextSlotIndex] = this.state.player1Up ? 'X' : 'O';\n\n        this.setState({\n            discs: discs,\n            player1Up: !this.state.player1Up,\n        });\n    };\n\n    checkForWinner = () => {\n        let winner = false;\n        let matches = [];\n\n        this.state.discs.forEach((disc, index) => {\n            if (!disc || winner) {\n                return;\n            }\n\n            // horizontal check\n            let horizontalWinner = {};\n            if (index % BOARD_CONFIG.WIDTH <= 4) {\n                horizontalWinner = this.checkForHorizontalMatches(disc, index);\n            }\n\n            // vertical check\n            const shouldCheckVerticalMatches = Math.ceil((index + 1) / BOARD_CONFIG.WIDTH) <= BOARD_CONFIG.HEIGHT - 3;\n\n            if (shouldCheckVerticalMatches) {\n                let diagonalRightWinner = {};\n                let diagonalLeftWinner = {};\n\n                const verticalWinner = this.checkForVerticalMatches(disc, index);\n\n                if (index % BOARD_CONFIG.WIDTH >= 4) {\n                    diagonalRightWinner = this.checkForDiagonalRightMatches(disc, index);\n                }\n                if (index % BOARD_CONFIG.WIDTH <= 4) {\n                    diagonalLeftWinner = this.checkForDiagonalLeftMatches(disc, index);\n                }\n\n                if (horizontalWinner.isWinner) {\n                    matches = horizontalWinner.matches;\n                    winner = horizontalWinner.isWinner;\n                }\n                if (verticalWinner.isWinner) {\n                    matches = verticalWinner.matches;\n                    winner = verticalWinner.isWinner;\n                }\n                if (diagonalLeftWinner.isWinner) {\n                    matches = diagonalLeftWinner.matches;\n                    winner = diagonalLeftWinner.isWinner;\n                }\n                if (diagonalRightWinner.isWinner) {\n                    matches = diagonalRightWinner.matches;\n                    winner = diagonalRightWinner.isWinner;\n                }\n            }\n            return winner;\n        });\n        return { winner, matches };\n    };\n\n    checkForHorizontalMatches = (disc, index) => {\n        let horizontalWinner = false;\n        const matchLength = 3;\n        let i = 0;\n        let localIndex = index;\n        let matches = [index];\n\n        for (; i < matchLength; i++) {\n            const nextDisc = this.state.discs[localIndex + 1];\n            if (!nextDisc) {\n                horizontalWinner = false;\n                break;\n            }\n\n            if (disc === nextDisc) {\n                localIndex = localIndex + 1;\n                matches.push(localIndex);\n            }\n            if (disc === nextDisc && i === matchLength - 1) {\n                horizontalWinner = true;\n                break;\n            }\n        }\n\n        return { isWinner: horizontalWinner, matches };\n    };\n\n    checkForVerticalMatches = (disc, index) => {\n        let verticalWinner = false;\n        const matchLength = 3;\n        let i = 0;\n        let localIndex = index;\n        let matches = [index];\n        for (; i < matchLength; i++) {\n            const nextDisc = this.state.discs[localIndex + BOARD_CONFIG.WIDTH];\n\n            if (!nextDisc) {\n                verticalWinner = false;\n                break;\n            }\n            if (disc === nextDisc) {\n                localIndex = localIndex + BOARD_CONFIG.WIDTH;\n                matches.push(localIndex);\n            }\n\n            if (disc === nextDisc && i === matchLength - 1) {\n                verticalWinner = true;\n\n                break;\n            }\n        }\n        return { isWinner: verticalWinner, matches };\n    };\n\n    checkForDiagonalLeftMatches = (disc, index) => {\n        let diagonalLeftWinner = false;\n        const matchLength = 3;\n        let i = 0;\n        let localIndex = index;\n        let matches = [index];\n        for (; i < matchLength; i++) {\n            const nextDisc = this.state.discs[localIndex + BOARD_CONFIG.WIDTH + 1];\n\n            if (!nextDisc) {\n                diagonalLeftWinner = false;\n                break;\n            }\n            if (disc === nextDisc) {\n                localIndex = localIndex + BOARD_CONFIG.WIDTH + 1;\n                matches.push(localIndex);\n            }\n\n            if (disc === nextDisc && i === matchLength - 1) {\n                diagonalLeftWinner = true;\n                break;\n            }\n        }\n\n        return { isWinner: diagonalLeftWinner, matches };\n    };\n\n    checkForDiagonalRightMatches = (disc, index) => {\n        let diagonalRightWinner = false;\n        const matchLength = 3;\n        let i = 0;\n        let localIndex = index;\n        let matches = [index];\n        for (; i < matchLength; i++) {\n            const nextDisc = this.state.discs[localIndex + BOARD_CONFIG.WIDTH - 1];\n\n            if (!nextDisc) {\n                diagonalRightWinner = false;\n                break;\n            }\n            if (disc === nextDisc) {\n                localIndex = localIndex + BOARD_CONFIG.WIDTH - 1;\n                matches.push(localIndex);\n            }\n\n            if (disc === nextDisc && i === matchLength - 1) {\n                diagonalRightWinner = true;\n                break;\n            }\n        }\n        return { isWinner: diagonalRightWinner, matches };\n    };\n\n    render() {\n        const { winner, matches } = this.checkForWinner();\n\n        return (\n            <>\n                <Score isWinner={winner} player1Up={this.state.player1Up} handleResetGame={this.handleResetGame} />\n                <Board isWinner={winner} discs={this.state.discs} config={BOARD_CONFIG} onDiscClick={this.handleOnDiscClick} matches={matches} />\n            </>\n        );\n    }\n}\n\nexport default Game;\n","import React from 'react';\n\nimport './App.scss';\nimport Game from './components/game/Game';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <div className=\"appWrapper\">\n                <Game />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}